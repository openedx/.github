# This is a reusable workflow for running ShellCheck,
# a linter for shell scripts (https://shellcheck.net).

# For more context, see:
# https://github.com/openedx/.github/blob/master/docs/decisions/0001-shellcheck.rst

name: ShellCheck

on: 
  workflow_call:
    inputs:

      root-dirs:
        type: string
        required: true
        description: |
          Directories to search for .sh files, space-separated, each relative
          to the root of the repository. Directories containing spaces or other
          Bash delimiters must be wrapped in single quotes.

      operating-system:
        type: string
        required: false
        default: "ubuntu"
        description: |
          Operating system on which to run ShellCheck. Options are 'ubuntu' and 'macos'.
    
      shellcheck-version:
        type: string
        required: false
        default: "v0.9.0"
        description:
          ShellCheck version to install.
          Must be a tag or branch of https://github.com/koalaman/shellcheck.
          By default, the upstream action will use a reasonable, stable shellcheck version,
          which will be updated over time as new stable ShellCheck versions come out.
          If you want your repositoriy's build to be totally deterministic, though, then
          override with a specific version pin here, and manage updates ShellCheck yourself.
    
      shellcheck-options:
        type: string
        required: false
        default: ""
        description: |
          Command-line options to forward to shellcheck.
          For details of available options, run "shellcheck --help."

jobs:
  shellcheck:

    runs-on: "${{ inputs.operating-system }}-latest"

    defaults:
      run:
        # Specifying bash ensures that `-o pipefail` (exit when the input to a pipeline fails) is enabled.
        shell: bash 

    env: 
      SHELLCHECK_ARCHIVE: ""  # We set this below based on operating-system.

    steps:

    - name: (Setup) Choose Linux AMD64 ShellCheck archive
      if: inputs.operating-system == 'ubuntu'
      run: echo "SHELLCHECK_ARCHIVE=shellcheck-${{ inputs.shellcheck-version }}.linux.x86_64.tar.xz" >> "$GITHUB_ENV"

    - name: (Setup) Choose Darwin (macOS) AMD64 ShellCheck archive
      if: inputs.operating-system == 'macos'
      run: echo "SHELLCHECK_ARCHIVE=shellcheck-${{ inputs.shellcheck-version }}.darwin.x86_64.tar.xz" >> "$GITHUB_ENV"

    - name: (Setup) Fail if we did not choose a ShellCheck archive
      if: env.SHELLCHECK_ARCHIVE == ''
      run: |
          echo "::error::Error: Invalid input for operating-system: ${{ inputs.operating-system }}." && exit 1

    - name: (Setup) Download & unpack ShellCheck
      run: curl -L --fail --silent --show-error "https://github.com/koalaman/shellcheck/releases/download/${{ inputs.shellcheck-version }}/${{ env.SHELLCHECK_ARCHIVE }}" | tar --extract --xz

    - name: (Setup) Install ShellCheck
      run: sudo cp "shellcheck-${{ inputs.shellcheck-version }}/shellcheck" /usr/local/bin

    - name: (Setup) Show ShellCheck version
      run: shellcheck -V

    - name: (Setup) Check out repository branch
      uses: actions/checkout@v3

    - name: Ensure that at least one script will be checked
      run: |
        if [[ -z "$(find ${{ inputs.root-dirs }} -name '*.sh')" ]] ; then
          echo "::error::Error: No .sh files found within any of the root-dirs: ${{ inputs.root-dirs }}"
          exit 1
        fi 

    - name: Print helpful information
      run: |
        echo "The following shell scripts will be checked:"
        find ${{ inputs.root-dirs }} -name '*.sh'
        echo
        echo "If ShellCheck passes, the next step will have no output."
        echo "If ShellCheck fails, you should see a list of violations."
        echo "Each violation type has an SCXXXX code which can be looked up at https://www.shellcheck.net/wiki/SCXXXX"
        echo "We recommend that you try to resolve any violations."
        echo "In the case where resolving the violation doesn't make sense, you can use directives (https://www.shellcheck.net/wiki/Directive) to ignore a single violation instance or an entire shell script."
        echo

    # This step is intentionally a big one-line command so that
    # devs can easily copy it and run it on their own machine.
    - name: Run ShellCheck
      run: find ${{ inputs.root-dirs }} -name '*.sh' -print0 | xargs -0 shellcheck ${{ inputs.shellcheck-options }}

